// src/utils/offlineSyncHelper.js
import localforage from "localforage";

const LOG_KEY = "offlineLogs";

/**
 * Create a log entry with standard schema expected by backend.
 * @param {string} action - The user action type (e.g. click_save_subtask, toggle_signoff)
 * @param {object} details - Object that includes task/subtask/loco/wms identifiers
 */
export const createLogEntry = (action, details = {}) => ({
  userId: localStorage.getItem("userId") || "unknown",
  action,
  locoID: details.locoID || null,
  details: JSON.stringify(details),
  actionTime: new Date().toISOString(),
  status: "pending",
});

/**
 * Cache a single log entry in localForage (offline or online).
 * @param {object} entry - A log object generated by createLogEntry
 */
export const cacheLogEntry = async (entry) => {
  const current = (await localforage.getItem(LOG_KEY)) || [];
  current.push(entry);
  await localforage.setItem(LOG_KEY, current);
};

/**
 * Upload all pending logs to backend API.
 * Successful sync will remove logs from localForage.
 */
export const syncLogs = async () => {
  const allLogs = (await localforage.getItem(LOG_KEY)) || [];
  const pendingLogs = allLogs.filter((log) => log.status === "pending");

  if (pendingLogs.length === 0) return;

  try {
    for (const log of pendingLogs) {
      const res = await fetch("/api/logs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          userId: log.userId,
          action: log.action,
          locoID: log.locoID || null,
          details: log.details,
          actionTime: log.actionTime,
        }),
      });

      if (!res.ok) {
        throw new Error(`Failed to sync log: ${log.action}`);
      }
    }

    // All uploaded successfully â€“ clear local
    await localforage.removeItem(LOG_KEY);
  } catch (err) {
    console.error("Log sync failed:", err);
  }
};

/**
 * Save a log entry and sync immediately if online.
 * @param {object} logEntry - A complete log object
 */
export const saveAndMaybeSyncLog = async (logEntry) => {
  await cacheLogEntry(logEntry);

  if (navigator.onLine) {
    await syncLogs();
  }
};